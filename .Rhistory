rate_est[j] <- fit.gamma$estimate["rate"]
#Cramer von Mises criterium, ukladam pouze p-value testu
CVM_test[j] <- cvm.test(pozorovani,"pgamma",shape_est[j],rate_est[j],estimated=TRUE)$p.value
}
odhad_teor_hustoty <- data.frame(odhad_beta,odhad_mu)
odhad_gamma_fit <- data.frame(shape_est,rate_est)
#Vykresleni boxplotu pro dane k, ktere je volene pred hlavnim for loop
boxplot(odhad_teor_hustoty,names=c("Odhad beta","Odhad mu"),
main= sprintf("Odhady parametrů teoretické hustoty pro škálovaný případ, k = %i",k) )
summary(odhad_teor_hustoty)
#Pro pripomenuti skutecnych hodnot
beta
mu
#Boxplot pro odhady gamma rozdeleni
boxplot(odhad_gamma_fit,names=c("Odhad shape","Odhad rate"),
main= sprintf("Odhady parametrů gamma distribuce pro škálovaný případ, k = %i",k) )
#Priprava dat pro barplot vysledku CVM testu
#Namisto TRUE mi to dá 1 a namísto FALSE mi to dá 0
Vysledky_CVM <- as.integer(CVM_test>0.05)
Vysledky_CVM <- table(Vysledky_CVM)
#Barplot pro znazorneni pomeru zamitnuti/nezamitnuti hypotezy, ze data jsou z gamma
barplot_hypoteza <- barplot(Vysledky_CVM,
main ="Poměr zamítnutí/nezamítnutí hypotéz, že data pocházejí z gamma rozdělení",
names.arg = c("Zamítnutí","Nezamítnutí"),
col =c("mistyrose","lavender")
)
text(barplot_hypoteza,0,round(Vysledky_CVM,1),cex=5,pos=3 )
source('D:/Intel/Documents/R programy/Boxplot_betamu.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/R programy/Boxplot_betamu.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/R programy/Boxplot_betamu.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/R programy/Boxplot_betamu.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/R programy/Boxplot_betamu.R', encoding = 'UTF-8', echo=TRUE)
#Zde volim pro ktere k chci odhadovat parametry
k<-0
#Podle zvoleneho k vyse rozhodne ktere data pouziju v hlavnim for loop
if(k ==0){
Moje_data <- split_data_0
for(j in 1:pocet_odhadu ){
print(j)
pozorovani <- Moje_data[[j]]
#VYPOCET PRVNI SUMY/CTVRTY CLEN
ctvrtyclen <- function(alpha, beta){
ejkej <- function(j) (pozorovani*beta)^j/factorial(j)
vysledek =0
#pro pevny index pozorovani mam pevne cislo vysledek
for(j in 0:(alpha-1)){
vysledek = vysledek + ejkej(j)
}
sum(log(vysledek))
}
#VYPOCET DRUHE SUMY/PATY CLEN
patyclen <- function(alpha, beta, lambda, mu){
brekeke <- function(j) (beta/(beta +mu) )^j * gamma(lambda +j)/factorial(j)
mezivysledek <- 0
for(j in 0:(alpha-1)){
mezivysledek = mezivysledek + brekeke(j)
}
length(pozorovani)*log(mezivysledek )
}
#Zaporna log-verohodnostni funkce, argumenty muzu upravit podle toho ktery chci zrovna odhadnout
#Za parametr lambda je dosazen mu. TO odpovida skalovani na hlavni silnici na EX=1
neg_log_like <- function(Params){
beta <- Params[1]
mu <- Params[2]
-(
( mu)*length(pozorovani)*log(beta +mu) +
(  mu -1)*sum(log(pozorovani)) -
(beta+mu)*sum(pozorovani) +
ctvrtyclen(alpha, beta)  -
patyclen(alpha, beta, mu, mu) )
}
minimalizace_negloglike <- nlm(neg_log_like, c(6,6) )
odhad_beta[j] <- minimalizace_negloglike$estimate[1]
odhad_mu[j] <- minimalizace_negloglike$estimate[2]
#Odhadovani parametru pro fitovani gamma distribuce
fit.gamma <- pozorovani %>%
fitdist(distr= 'gamma', method = 'mle')
shape_est[j] <- fit.gamma$estimate["shape"]
rate_est[j] <- fit.gamma$estimate["rate"]
#Cramer von Mises criterium, ukladam pouze p-value testu
CVM_test[j] <- cvm.test(pozorovani,"pgamma",shape_est[j],rate_est[j],estimated=TRUE)$p.value
}
} else if(k ==1){
Moje_data <- split_data_1
} else if(k==2){
Moje_data <- split_data_2
} else if(k==3){
Moje_data <- split_data_3
}
source('D:/Intel/Documents/R programy/Boxplot_betamu.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/R programy/Boxplot_betamu.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/R programy/Vykreslit_graf.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/R programy/rozdel_akcept_gamma.R', echo=TRUE)
source('D:/Intel/Documents/R programy/Boxplot_betamu.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/R programy/Boxplot_betamu.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/R programy/rozdel_akcept_gamma.R', echo=TRUE)
source('D:/Intel/Documents/R programy/Boxplot_betamu.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/R programy/Boxplot_betamu.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/R programy/Boxplot_betamu.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Simulace VU/rozdel_akcept_gamma.R', echo=TRUE)
load("D:/Intel/Documents/Simulace VU/Beta_pro_osmctyriosmtri.RData")
load("D:/Intel/Documents/test_k_je_nula.Rdata")
load("D:/Intel/Documents/Simulace VU/Beta_pro_osmctyriosmtri.RData")
Beta_pro_osmctyriosmtri
load("D:/Intel/Documents/Simulace VU/Beta_pro_osmctyriosmtri.RData")
load("D:/Intel/Documents/Simulace VU/test_k_je_nula.Rdata")
library(readxl)
Munich_INTSEC_01 <- read_excel("C:/Users/Intel/Desktop/V�\275zkumn�\275 úkol/Data a jejich popis/Munchen_2019/Munich_INTSEC_01.xlsx")
View(Munich_INTSEC_01)
library(readxl)
Munich_INTSEC_01 <- read_excel("Real data VU/Munich_INTSEC_01.xlsx")
View(Munich_INTSEC_01)
class(Munich_INTSEC_01)
View(Munich_INTSEC_01)
library(readxl)
Munich_INTSEC_01 <- read_excel("Real data VU/Munich_INTSEC_01.xlsx",
col_names = FALSE)
View(Munich_INTSEC_01)
Dataset_1 <- read_excel("Real data VU/Munich_INTSEC_01.xlsx",
+     col_names = c("Gaps","k","Hustota",
"Velocity"))
Dataset_1 <- read_excel("Real data VU/Munich_INTSEC_01.xlsx",
+     col_names = ("Gaps","k","Hustota",
"Velocity"))
Dataset_1 <- read_excel("Real data VU/Munich_INTSEC_01.xlsx",
+     col_names = FALSE)
Dataset_1 <- read_excel("Real data VU/Munich_INTSEC_01.xlsx",
+     col_names = FALSE)
Munich_INTSEC_01 <- read_excel("Real data VU/Munich_INTSEC_01.xlsx",
+     col_names = ("Gaps","k","Hustota", "Velocity"))
library(readxl)
Munich_INTSEC_01 <- read_excel("Real data VU/Munich_INTSEC_01.xlsx",
+     col_names = ("Gaps","k","Hustota", "Velocity"))
> Munich_INTSEC_01 <- read_excel("Real data VU/Munich_INTSEC_01.xlsx",
+     col_names = FALSE)
library(readxl)
> Munich_INTSEC_01 <- read_excel("Real data VU/Munich_INTSEC_01.xlsx",
+     col_names = FALSE)
library(readxl)
Munich_INTSEC_01 <- read_excel("Real data VU/Munich_INTSEC_01.xlsx",
+     col_names = FALSE)
library(readxl)
> Munich_INTSEC_01 <- read_excel("Real data VU/Munich_INTSEC_01.xlsx",
+     col_names = FALSE)
library(readxl)Munich_INTSEC_01 <- read_excel("Real data VU/Munich_INTSEC_01.xlsx",
+     col_names = FALSE)
Munich_INTSEC_02 <- read_excel("Real data VU/Munich_INTSEC_02.xlsx",
+     col_names = FALSE)
#"Gaps","k","Hustota", "Velocity"
dataset <- Munich_INTSEC_01
View(dataset)
colnames(dataset) <- c("Gaps","k","Hustota", "Velocity")
colnames(dataset) <- c("Gap","k","Hustota", "Velocity")
View(dataset)
colnames(dataset) <- c("Gap","k","Hustota", "Rychlost")
source('~/.active-rstudio-document', echo=TRUE)
picovina <- read_xlsx(Munich_INTSEC_01)
Munich_INTSEC_02 <- read_excel("Real data VU/Munich_INTSEC_02.xlsx")
kokot <- read_excel("Real data VU/Munich_INTSEC_02.xlsx")
dataset <- read_excel("Real data VU/Munich_INTSEC_01.xlsx")
colnames(dataset) <- c("Gap","k","Hustota", "Rychlost")
dataset <- read_excel("Real data VU/Munich_INTSEC_01.xlsx")
dataset <- read_excel("Real data VU/Munich_INTSEC_01.xlsx",+ col_names = FALSE)
dataset <- read_excel("Real data VU/Munich_INTSEC_01.xlsx",
+ col_names = FALSE)
source('~/.active-rstudio-document', echo=TRUE)
dataset <- read_excel("Real data VU/Munich_INTSEC_01.xlsx",
col_names = FALSE)
colnames(dataset) <- c("Gap","k","Hustota", "Rychlost")
dataset
dataset$Gap
dataset$Gap[5]
dataset$Gap[1]
dataset$Gap[dataset$k ==0]
for(j in 0:6){
Gaps[[j]] <- dataset$Gap[dataset$k == j]
}
Gaps <- vector(mode = "list", length = 6)
for(j in 1:7){
k<- j-1
Gaps[[j]] <- dataset$Gap[dataset$k == j]
}
for(j in 1:7){
l<- j-1
Gaps[[j]] <- dataset$Gap[dataset$k == l]
}
class[Gaps[[1]]]
class(Gaps[[1]])
PICA <- as.numeric(unlist(Gaps))
PICA[1]
PICCCA <- as.data.frame(Gaps,row.names = NULL)
Gaps <- vector(mode = "list", length = 6)
for(j in 1:7){
l<- j-1
Gaps[[j]] <- as.numeric(dataset$Gap[dataset$k == l])
}
Gaps[[1]]
source('~/.active-rstudio-document', echo=TRUE)
Gaps[[1]]
View(Gaps)
histogramek <- ggplot() +
geom_histogram( aes(x=Gaps[[1]], y = ..density..),alpha=0.6,fill = "grey",
color = "black", bins = 100, boundary = 0 ) +
labs(title = "Rozdělení akceptující právě 1 vozidlo)",
subtitle = 'Reálná data',
y = 'Hustota', x='Délka mezery')
histogramek
histogramek <- ggplot() +
geom_histogram( aes(x=Gaps[[2]], y = ..density..),alpha=0.6,fill = "grey",
color = "black", bins = 100, boundary = 0 ) +
labs(title = "Rozdělení akceptující právě 1 vozidlo)",
subtitle = 'Reálná data',
y = 'Hustota', x='Délka mezery')
histogramek
histogramek <- ggplot() +
geom_histogram( aes(x=Gaps[[3]], y = ..density..),alpha=0.6,fill = "grey",
color = "black", bins = 100, boundary = 0 ) +
labs(title = "Rozdělení akceptující právě 1 vozidlo)",
subtitle = 'Reálná data',
y = 'Hustota', x='Délka mezery')
histogramek
histogramek <- ggplot() +
geom_histogram( aes(x=Gaps[[4]], y = ..density..),alpha=0.6,fill = "grey",
color = "black", bins = 100, boundary = 0 ) +
labs(title = "Rozdělení akceptující právě 1 vozidlo)",
subtitle = 'Reálná data',
y = 'Hustota', x='Délka mezery')
histogramek
histogramek <- ggplot() +
geom_histogram( aes(x=Gaps[[1]], y = ..density..),alpha=0.6,fill = "grey",
color = "black", bins = 100, boundary = 0 ) +
labs(title = "Rozdělení akceptující právě 1 vozidlo)",
subtitle = 'Reálná data',
y = 'Hustota', x='Délka mezery')
histogramek
Gaps
histogramek <- ggplot() +
geom_histogram( aes(x=Gaps, y = ..density..),alpha=0.6,fill = "grey",
color = "black", bins = 100, boundary = 0 ) +
labs(title = "Rozdělení akceptující právě 1 vozidlo)",
subtitle = 'Reálná data',
y = 'Hustota', x='Délka mezery')
histogramek
histogramek <- ggplot() +
geom_histogram( aes(x=Gaps[[1]], y = ..density..),alpha=0.6,fill = "grey",
color = "black", bins = 100, boundary = 0 ) +
labs(title = "Rozdělení akceptující právě 1 vozidlo)",
subtitle = 'Reálná data',
y = 'Hustota', x='Délka mezery')
histogramek
summary(dataset)
summary(Gaps)
summary(dataset$Gap)
summary(Gaps[[1]])
summary(Gaps[[6]])
histogramek <- ggplot() +
geom_histogram( aes(x=Gaps[[1]], y = ..density..),alpha=0.6,fill = "grey",
color = "black", bins = 100, boundary = 0 ) +
labs(title = "Rozdělení akceptující právě xxx vozidlo)",
subtitle = 'Reálná data',
y = 'Hustota', x='Délka mezery')
histogramek
dataset1 <- read_excel("Real data VU/Munich_INTSEC_01.xlsx",
col_names = FALSE)
dataset2 <- read_excel("Real data VU/Munich_INTSEC_02.xlsx",
col_names = FALSE)
dataset3 <- read_excel("Real data VU/Munich_INTSEC_03.xlsx",
col_names = FALSE)
dataset1 <- read_excel("Real data VU/Munich_INTSEC_01.xlsx",
col_names = FALSE)
dataset2 <- read_excel("Real data VU/Munich_INTSEC_02.xlsx",
col_names = FALSE)
dataset3 <- read_excel("Real data VU/Munich_INTSEC_03.xlsx",
col_names = FALSE)
colnames(dataset1) <- c("Gap","k","Hustota", "Rychlost")
colnames(dataset2) <- c("Gap","k","Hustota", "Rychlost")
colnames(dataset3) <- c("Gap","k","Hustota", "Rychlost")
Gaps1 <- vector(mode = "list", length = 6)
Gaps2 <- vector(mode = "list", length = 6)
Gaps3 <- vector(mode = "list", length = 6)
for(j in 1:7){
l<- j-1
Gaps1[[j]] <- as.numeric(dataset1$Gap[dataset1$k == l])
}
library(readxl)
library(readr)
library(plyr)
library(dplyr)
library(ggplot2)
library(devtools)
library(fitdistrplus)
library(optimx)
library(goftest)
dataset1 <- read_excel("Real data VU/Munich_INTSEC_01.xlsx",
col_names = FALSE)
dataset2 <- read_excel("Real data VU/Munich_INTSEC_02.xlsx",
col_names = FALSE)
dataset3 <- read_excel("Real data VU/Munich_INTSEC_03.xlsx",
col_names = FALSE)
colnames(dataset1) <- c("Gap","k","Hustota", "Rychlost")
colnames(dataset2) <- c("Gap","k","Hustota", "Rychlost")
colnames(dataset3) <- c("Gap","k","Hustota", "Rychlost")
Gaps1 <- vector(mode = "list", length = 6)
Gaps2 <- vector(mode = "list", length = 6)
Gaps3 <- vector(mode = "list", length = 6)
for(j in 1:7){
l<- j-1
Gaps1[[j]] <- as.numeric(dataset1$Gap[dataset1$k == l])
}
histogramek <- ggplot() +
geom_histogram( aes(x=Gaps1[[1]], y = ..density..),alpha=0.6,fill = "grey",
color = "black", bins = 100, boundary = 0 ) +
labs(title = "Rozdělení akceptující právě xxx vozidlo)",
subtitle = 'Reálná data',
y = 'Hustota', x='Délka mezery')
histogramek
for(j in 1:7){
l<- j-1
Gaps1[[j]] <- as.numeric(dataset1$Gap[dataset1$k == l])
Gaps2[[j]] <- as.numeric(dataset2$Gap[dataset2$k == l])
Gaps3[[j]] <- as.numeric(dataset3$Gap[dataset3$k == l])
}
Gaps1 <- vector(mode = "list", length = 8)
Gaps2 <- vector(mode = "list", length = 8)
Gaps3 <- vector(mode = "list", length = 8)
for(j in 1:8){
l<- j-1
Gaps1[[j]] <- as.numeric(dataset1$Gap[dataset1$k == l])
Gaps2[[j]] <- as.numeric(dataset2$Gap[dataset2$k == l])
Gaps3[[j]] <- as.numeric(dataset3$Gap[dataset3$k == l])
}
Gaps1 <- vector(mode = "list", length = 8)
Gaps2 <- vector(mode = "list", length = 8)
Gaps3 <- vector(mode = "list", length = 8)
Gaps1 <- vector(mode = "list", length = 10)
Gaps2 <- vector(mode = "list", length = 10)
Gaps3 <- vector(mode = "list", length = 10)
for(j in 1:10){
l<- j-1
Gaps1[[j]] <- as.numeric(dataset1$Gap[dataset1$k == l])
Gaps2[[j]] <- as.numeric(dataset2$Gap[dataset2$k == l])
Gaps3[[j]] <- as.numeric(dataset3$Gap[dataset3$k == l])
}
dataset3
summary(dataset3$k)
dataset3$k
View(dataset3)
View(dataset2)
View(dataset1)
Gaps1 <- vector(mode = "list", length = 8)
Gaps2 <- vector(mode = "list", length = 8)
Gaps3 <- vector(mode = "list", length = 8)
for(j in 1:8){
l<- j-1
Gaps1[[j]] <- as.numeric(dataset1$Gap[dataset1$k == l])
Gaps2[[j]] <- as.numeric(dataset2$Gap[dataset2$k == l])
Gaps3[[j]] <- as.numeric(dataset3$Gap[dataset3$k == l])
}
View(Gaps1)
View(dataset1)
View(dataset3)
Gaps1 <- vector(mode = "list", length = 9)
Gaps2 <- vector(mode = "list", length = 9)
Gaps3 <- vector(mode = "list", length = 9)
for(j in 1:9){
l<- j-1
Gaps1[[j]] <- as.numeric(dataset1$Gap[dataset1$k == l])
Gaps2[[j]] <- as.numeric(dataset2$Gap[dataset2$k == l])
Gaps3[[j]] <- as.numeric(dataset3$Gap[dataset3$k == l])
}
View(dataset2)
histogramek <- ggplot() +
geom_histogram( aes(x=Gaps2[[1]], y = ..density..),alpha=0.6,fill = "grey",
color = "black", bins = 100, boundary = 0 ) +
labs(title = "Rozdělení akceptující právě xxx vozidlo)",
subtitle = 'Reálná data',
y = 'Hustota', x='Délka mezery')
histogramek
histogramek <- ggplot() +
geom_histogram( aes(x=Gaps3[[1]], y = ..density..),alpha=0.6,fill = "grey",
color = "black", bins = 100, boundary = 0 ) +
labs(title = "Rozdělení akceptující právě xxx vozidlo)",
subtitle = 'Reálná data',
y = 'Hustota', x='Délka mezery')
histogramek
source('D:/Intel/Documents/Real data VU/hlavni.R', encoding = 'UTF-8', echo=TRUE)
#Vykresleni obrazku
porovnani_datasetu <- ggplot(sloucene_gaps, aes(x=prislusna_data,fill = cislo_dataset)) +
geom_density(alpha=0.4 ) +
labs(title=sprintf("Hustota rozestupů na hlavní silnici v různých datasetech pro dané %i",k),
x="Vzdálenost (s)", y = "Hustota (1/s)")
porovnani_datasetu +theme(legend.background = element_rect(size=0.5, linetype="solid"),
legend.position = c(0.9, 0.8))  +
scale_fill_discrete(name = "Dataset")
#Vykresleni obrazku
porovnani_datasetu <- ggplot(sloucene_gaps, aes(x=prislusna_data,fill = cislo_dataset)) +
geom_density(alpha=0.4 ) +
labs(title=sprintf("Hustota rozestupů na hlavní silnici v různých datasetech pro %i vozidlo/a/el",k),
x="Vzdálenost (s)", y = "Hustota (1/s)")
porovnani_datasetu +theme(legend.background = element_rect(size=0.5, linetype="solid"),
legend.position = c(0.9, 0.8))  +
scale_fill_discrete(name = "Dataset")
#Vykresleni obrazku
porovnani_datasetu <- ggplot(sloucene_gaps, aes(x=prislusna_data,fill = cislo_dataset)) +
geom_density(alpha=0.4 ) +
labs(title=sprintf("Hustota rozestupů na hlavní silnici v různých datasetech pro k=%i",k),
x="Vzdálenost (s)", y = "Hustota (1/s)")
porovnani_datasetu +theme(legend.background = element_rect(size=0.5, linetype="solid"),
legend.position = c(0.9, 0.8))  +
scale_fill_discrete(name = "Dataset")
#k je kolik mezery akceptuji aut
k <- 4
j <- k+1
prislusna_data <- c(Gaps1[[j]],Gaps2[[j]],Gaps3[[j]])
cislo_dataset <- c(rep("První",length(Gaps1[[j]] ) ),rep("Druhý",length(Gaps2[[j]] ) ),rep("Třetí",length(Gaps3[[j]] ) )     )
sloucene_gaps <- data.frame(cislo_dataset,prislusna_data)
#Vykresleni obrazku
porovnani_datasetu <- ggplot(sloucene_gaps, aes(x=prislusna_data,fill = cislo_dataset)) +
geom_density(alpha=0.4 ) +
labs(title=sprintf("Hustota rozestupů na hlavní silnici v různých datasetech pro k=%i",k),
x="Vzdálenost (s)", y = "Hustota (1/s)")
porovnani_datasetu +theme(legend.background = element_rect(size=0.5, linetype="solid"),
legend.position = c(0.9, 0.8))  +
scale_fill_discrete(name = "Dataset")
source('D:/Intel/Documents/Real data VU/hlavni.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/hlavni.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/hlavni.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/hlavni.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/hlavni.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/hlavni.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/overeni_podobnosti_datasetu.R', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
View(dataset2)
source('~/.active-rstudio-document', echo=TRUE)
Nacist_data()
source('~/.active-rstudio-document', echo=TRUE)
Nacist_data()
source('~/.active-rstudio-document', echo=TRUE)
Nacist_data()
source('~/.active-rstudio-document', echo=TRUE)
c(c(5,23),c(2,1))
Gaps1[[1]]
Total_gaps <- vector(mode = "list", length = 9)
for(j in 1:9){
l<- j-1
Gaps1[[j]] <- as.numeric(dataset1$Gap[dataset1$k == l])
Gaps2[[j]] <- as.numeric(dataset2$Gap[dataset2$k == l])
Gaps3[[j]] <- as.numeric(dataset3$Gap[dataset3$k == l])
Total_gaps[[j]] <- c(Gaps1[[j]],Gaps2[[j]],Gaps3[[j]])
}
summary(Total_gaps[[1]])
source('~/.active-rstudio-document', echo=TRUE)
Nacteni_dat()
source('~/.active-rstudio-document', echo=TRUE)
Total_gaps <- list(Total_gaps)
dataset1 <- read_excel("Real data VU/Munich_INTSEC_01.xlsx",
col_names = FALSE)
dataset2 <- read_excel("Real data VU/Munich_INTSEC_02.xlsx",
col_names = FALSE)
dataset3 <- read_excel("Real data VU/Munich_INTSEC_03.xlsx",
col_names = FALSE)
colnames(dataset1) <- c("Gap","k","Hustota", "Rychlost")
colnames(dataset2) <- c("Gap","k","Hustota", "Rychlost")
colnames(dataset3) <- c("Gap","k","Hustota", "Rychlost")
Gaps1 <- vector(mode = "list", length = 9)
Gaps2 <- vector(mode = "list", length = 9)
Gaps3 <- vector(mode = "list", length = 9)
Total_gaps <- vector(mode = "list", length = 9)
for(j in 1:9){
l<- j-1
Gaps1[[j]] <- as.numeric(dataset1$Gap[dataset1$k == l])
Gaps2[[j]] <- as.numeric(dataset2$Gap[dataset2$k == l])
Gaps3[[j]] <- as.numeric(dataset3$Gap[dataset3$k == l])
Total_gaps[[j]] <- c(Gaps1[[j]],Gaps2[[j]],Gaps3[[j]])
}
Total_gaps <- list(Total_gaps)
return(Total_gaps)
#################
#################
#Cteni dat
Nacteni_dat <- function(){
dataset1 <- read_excel("Real data VU/Munich_INTSEC_01.xlsx",
col_names = FALSE)
dataset2 <- read_excel("Real data VU/Munich_INTSEC_02.xlsx",
col_names = FALSE)
dataset3 <- read_excel("Real data VU/Munich_INTSEC_03.xlsx",
col_names = FALSE)
colnames(dataset1) <- c("Gap","k","Hustota", "Rychlost")
colnames(dataset2) <- c("Gap","k","Hustota", "Rychlost")
colnames(dataset3) <- c("Gap","k","Hustota", "Rychlost")
Gaps1 <- vector(mode = "list", length = 9)
Gaps2 <- vector(mode = "list", length = 9)
Gaps3 <- vector(mode = "list", length = 9)
Total_gaps <- vector(mode = "list", length = 9)
for(j in 1:9){
l<- j-1
Gaps1[[j]] <- as.numeric(dataset1$Gap[dataset1$k == l])
Gaps2[[j]] <- as.numeric(dataset2$Gap[dataset2$k == l])
Gaps3[[j]] <- as.numeric(dataset3$Gap[dataset3$k == l])
Total_gaps[[j]] <- c(Gaps1[[j]],Gaps2[[j]],Gaps3[[j]])
}
Total_gaps <- list(Total_gaps)
return(Total_gaps)
}
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
DAta <- Nacteni_dat()
source('~/.active-rstudio-document', echo=TRUE)
Total_gaps <- Nacteni_dat()
source('~/.active-rstudio-document', echo=TRUE)
source('D:/Intel/Documents/Real data VU/Nacteni_dat.R', echo=TRUE)
