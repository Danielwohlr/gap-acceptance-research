"odhad_beta.2"="beta","odhad_mu.2"="mu"))
BPsada
source('D:/Intel/Documents/Real data VU/Nacteni_dat.R', echo=TRUE)
source('D:/Intel/Documents/Real data VU/pokr_analyza.R', encoding = 'UTF-8', echo=TRUE)
#Nacteni dat a nejaka inicializace, Vybiram zde cislo krizovatky, k,...
###############################################################################
output <- Nacteni_dat()
Upload <- output[[1]]
#Indexy pro stredne rychla auta v uploadovanych datech
dolniR <- as.numeric(quantile(Upload$Rychlost,0.10))
horniR <- as.numeric(quantile(Upload$Rychlost,0.90))
Stredni_auta <- which(Upload$Rychlost >= dolniR & Upload$Rychlost <=horniR)
#Indexy ktere akceptovaly prave K vozidel
k<- 0
akcept <- which(Upload$k==k)
#Indexy pro prumernou hustotu vozidel
dolniH <- as.numeric(quantile(Upload$Hustota,0.10))
horniH <- as.numeric(quantile(Upload$Hustota,0.90))
prumer <- which(Upload$Hustota >dolniH & Upload$Hustota <horniH )
#Indexy stredne rychlych aut se stredni hustotou ktere akceptovaly k vozidel
stredni <- intersect(intersect(Stredni_auta,akcept),prumer)
#Stredne rychla vozidla akceptovana k vozidly
Data <- Upload$Gap[stredni]
Data
mean(Data)
#Kolik hodnot chci mit v jednom chunk
s <- 100
#Rozkouskuji data na chunks po s, pokud to lze, pokud ne, tak vypisu warning a pokracuji jakoby nic
#(nechapu proc se nevypise)
if(length(Data)<s){
ListPearson <- resulthyp(Data,k)
TeorHyp <- ListPearson$RozhodnutiTeor
reportX2 <- ListPearson$Pearson
GammaHyp <- ListPearson$RozhodnutiGamma
#Pro kazdy chunk si ulozim hodnoty parametru
alphy <- ListPearson$Parametry["alpha"]
bety <- ListPearson$Parametry["beta"]
lambdy <- ListPearson$Parametry["lambda"]
muy <- ListPearson$Parametry["mu"]
} else {
#Rozsekani dat na kousky po s
pocet_chunks <- floor(length(Data)/s)
trunc_data <- Data[1:(pocet_chunks*s)]
split_data <- split(trunc_data, ceiling(seq_along(trunc_data)/s) )
#Sem budu ukladat vysledky Pearsonovych testu pro kazdej chunk (0 zamitnuto, 1 nezamitnuto)
TeorHyp <- rep(NA,pocet_chunks)
#Sem budu ukladat vysledky Gamam fit testu pro kazdej chunk (0 zamitnuto, 1 nezamitnuto)
GammaHyp <- rep(NA,pocet_chunks)
#Sem budu ukladat hodnoty Pearsonovych statistik, pak vyberu tu nejnizsi a pro tu vykreslim obrazek
reportX2 <- rep(NA,pocet_chunks)
#Sem si budu ukladat hodnoty parametru
alphy <- rep(NA,pocet_chunks)
bety <- rep(NA,pocet_chunks)
lambdy <- rep(NA,pocet_chunks)
muy <- rep(NA,pocet_chunks)
for(iota in 1:pocet_chunks){
sprintf("%i out of %i",iota,pocet_chunks)
#Provedu test, ulozim si vystup
ListPearson <- resulthyp(split_data[[iota]],k)
TeorHyp[iota] <- ListPearson$RozhodnutiTeor
GammaHyp[iota] <- ListPearson$RozhodnutiGamma
reportX2[iota] <- ListPearson$Pearson
alphy[iota] <- ListPearson$Parametry["alpha"]
bety[iota] <- ListPearson$Parametry["beta"]
lambdy[iota] <- ListPearson$Parametry["lambda"]
muy[iota] <- ListPearson$Parametry["mu"]
}
}
source('D:/Intel/Documents/Real data VU/resulthyp.R', encoding = 'UTF-8', echo=TRUE)
#index chunku s nejmensi hodnotou Pearsonovy stat, pro nej kreslim
Bestfitidx <- min( which(reportX2 == min(reportX2) ) )
#Index "nejhorsiho" chunku
Worstfitidx <- min( which(reportX2 == max(reportX2) ) )
#udaje = synonymum pro data
udajeBest <- split_data[[Bestfitidx]]
udajeWorst <- split_data[[Worstfitidx]]
#Vykresli histogram + gamma fit + odhadnute teoreticke s nejlepsim a nejhorsim Pearsonem na teto krizovatce a specifickym k
A <- Obrazekmocpekny(udajeBest,k,1)
B <- Obrazekmocpekny(udajeWorst,k,0)
#Vykresli mi nejhorsi a nejlepsi shodu na jeden obrazek
figure <- ggarrange(A,B)
annotate_figure(figure, top = text_grob(sprintf("Rozdělení akceptující právě k=%i vozidel",k),
color = "red", face = "bold", size = 14) )
#Vypise ve vektoru vysledky hypotez (0-zamitnuto,1-nezamitnuto)
TeorHyp
sprintf("Bylo provedených %i Pearsonovo-X2 testů. Z toho byla hypotéza nezamítnuta %i-krát, což činí poměr zamítnutí %f",
length(TeorHyp),sum(TeorHyp),1-sum(TeorHyp)/length(TeorHyp))
GammaHyp
sprintf("Bylo provedených %i testů hypotézy, že škálované data jsou z gamma distribuce. Z toho byla hypotéza nezamítnuta %i-krát, což činí poměr zamítnutí %f",
length(GammaHyp),sum(GammaHyp),1-sum(GammaHyp)/length(GammaHyp))
Data
Data/mean(Data)
summary(Data/mean(Data))
source('D:/Intel/Documents/Real data VU/resulthyp.R', encoding = 'UTF-8', echo=TRUE)
Data <- Data/mean(data)
#Kolik hodnot chci mit v jednom chunk
s <- 100
#Rozkouskuji data na chunks po s, pokud to lze, pokud ne, tak vypisu warning a pokracuji jakoby nic
#(nechapu proc se nevypise)
if(length(Data)<s){
ListPearson <- resulthyp(Data,k)
TeorHyp <- ListPearson$RozhodnutiTeor
reportX2 <- ListPearson$Pearson
GammaHyp <- ListPearson$RozhodnutiGamma
#Pro kazdy chunk si ulozim hodnoty parametru
alphy <- ListPearson$Parametry["alpha"]
bety <- ListPearson$Parametry["beta"]
lambdy <- ListPearson$Parametry["lambda"]
muy <- ListPearson$Parametry["mu"]
} else {
#Rozsekani dat na kousky po s
pocet_chunks <- floor(length(Data)/s)
trunc_data <- Data[1:(pocet_chunks*s)]
split_data <- split(trunc_data, ceiling(seq_along(trunc_data)/s) )
#Sem budu ukladat vysledky Pearsonovych testu pro kazdej chunk (0 zamitnuto, 1 nezamitnuto)
TeorHyp <- rep(NA,pocet_chunks)
#Sem budu ukladat vysledky Gamam fit testu pro kazdej chunk (0 zamitnuto, 1 nezamitnuto)
GammaHyp <- rep(NA,pocet_chunks)
#Sem budu ukladat hodnoty Pearsonovych statistik, pak vyberu tu nejnizsi a pro tu vykreslim obrazek
reportX2 <- rep(NA,pocet_chunks)
#Sem si budu ukladat hodnoty parametru
alphy <- rep(NA,pocet_chunks)
bety <- rep(NA,pocet_chunks)
lambdy <- rep(NA,pocet_chunks)
muy <- rep(NA,pocet_chunks)
for(iota in 1:pocet_chunks){
sprintf("%i out of %i",iota,pocet_chunks)
#Provedu test, ulozim si vystup
ListPearson <- resulthyp(split_data[[iota]],k)
TeorHyp[iota] <- ListPearson$RozhodnutiTeor
GammaHyp[iota] <- ListPearson$RozhodnutiGamma
reportX2[iota] <- ListPearson$Pearson
alphy[iota] <- ListPearson$Parametry["alpha"]
bety[iota] <- ListPearson$Parametry["beta"]
lambdy[iota] <- ListPearson$Parametry["lambda"]
muy[iota] <- ListPearson$Parametry["mu"]
}
}
warnings()
source('D:/Intel/Documents/Real data VU/resulthyp.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/pokr_analyza.R', encoding = 'UTF-8', echo=TRUE)
warnings()
source('D:/Intel/Documents/Real data VU/resulthyp.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/pokr_analyza.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/resulthyp.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/pokr_analyza.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/resulthyp.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/pokr_analyza.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/resulthyp.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/pokr_analyza.R', encoding = 'UTF-8', echo=TRUE)
warnings()
source('D:/Intel/Documents/Real data VU/resulthyp.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/pokr_analyza.R', encoding = 'UTF-8', echo=TRUE)
Data
mean(Data)
source('D:/Intel/Documents/Real data VU/resulthyp.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/pokr_analyza.R', encoding = 'UTF-8', echo=TRUE)
Data
mean(Data)
source('D:/Intel/Documents/Real data VU/resulthyp.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/pokr_analyza.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/pokr_analyza.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/resulthyp.R', encoding = 'UTF-8', echo=TRUE)
Data
source('D:/Intel/Documents/Real data VU/pokr_analyza.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/pokr_analyza.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/pokr_analyza.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/pokr_analyza.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/Nacteni_dat.R', echo=TRUE)
source('D:/Intel/Documents/Real data VU/ObrazekPearson.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/ObrazekPearson.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/resulthyp.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/ObrazekPearson.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/resulthyp.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/pokr_analyza.R', encoding = 'UTF-8', echo=TRUE)
split_data
source('D:/Intel/Documents/Real data VU/Nacteni_dat.R', echo=TRUE)
source('D:/Intel/Documents/Real data VU/ObrazekPearson.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/resulthyp.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/pokr_analyza.R', encoding = 'UTF-8', echo=TRUE)
lambdy
bety
boxplot(bety)
histogram(bety)
hist(bety)
hist(lambdy)
barplot(lambdy)
source('D:/Intel/Documents/Real data VU/pokr_analyza.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/pokr_analyza.R', encoding = 'UTF-8', echo=TRUE)
udajeBest
mean(udajeBest)
mean(udajeWorst)
mean(Data)
max(Data)
min(Data)
which(Data == min(Data))
Data[106]
Obrazekmocpekny(split_data[[2]],k,0)
source('D:/Intel/Documents/Real data VU/pokr_analyza.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/pokr_analyza.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/pokr_analyza.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/pokr_analyza.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/pokr_analyza.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/pokr_analyza.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/pokr_analyza.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/pokr_analyza.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/pokr_analyza.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/resulthyp.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/resulthyp.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/pokr_analyza.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/pokr_analyza.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/pokr_analyza.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/pokr_analyza.R', encoding = 'UTF-8', echo=TRUE)
#Boxploty pro parametry
#################################################################################
#postupne jsem ukladal odhadnute parametry s datasetu pro ruzne k, ktere jsem menil nahore ve skriptu rucne
#
boxplot(alphy1,alphy2,alphy3,alphy4,names=c("k=0","k=1","k=2","k=3"),
#Boxploty pro parametry
#################################################################################
#postupne jsem ukladal odhadnute parametry s datasetu pro ruzne k, ktere jsem menil nahore ve skriptu rucne
#
boxplot(alphy1,alphy2,alphy3,alphy4,names=c("k=0","k=1","k=2","k=3"),
main = "Odhady parametru alpha (vedlejší silnice)")
#Boxploty pro parametry
#################################################################################
#postupne jsem ukladal odhadnute parametry s datasetu pro ruzne k, ktere jsem menil nahore ve skriptu rucne
#
boxplot(alphy1,alphy2,alphy3,alphy4,names=c("k=0","k=1","k=2","k=3"),
main = "Odhady parametru alpha (vedlejší silnice)")
source('D:/Intel/Documents/Real data VU/pokr_analyza.R', encoding = 'UTF-8', echo=TRUE)
annotate_figure(figure )
source('D:/Intel/Documents/Real data VU/ObrazekPearson.R', encoding = 'UTF-8', echo=TRUE)
#Vykresli histogram + gamma fit + odhadnute teoreticke s nejlepsim a nejhorsim Pearsonem na teto krizovatce a specifickym k
A <- Obrazekmocpekny(udajeBest,k,1)
B <- Obrazekmocpekny(udajeWorst,k,0)
#Vykresli mi nejhorsi a nejlepsi shodu na jeden obrazek
figure <- ggarrange(A,B)
annotate_figure(figure )
source('D:/Intel/Documents/Real data VU/ObrazekPearson.R', encoding = 'UTF-8', echo=TRUE)
#Vykresli histogram + gamma fit + odhadnute teoreticke s nejlepsim a nejhorsim Pearsonem na teto krizovatce a specifickym k
A <- Obrazekmocpekny(udajeBest,k,1)
B <- Obrazekmocpekny(udajeWorst,k,0)
#Vykresli mi nejhorsi a nejlepsi shodu na jeden obrazek
figure <- ggarrange(A,B)
annotate_figure(figure )
source('D:/Intel/Documents/Real data VU/ObrazekPearson.R', encoding = 'UTF-8', echo=TRUE)
#Vykresli histogram + gamma fit + odhadnute teoreticke s nejlepsim a nejhorsim Pearsonem na teto krizovatce a specifickym k
A <- Obrazekmocpekny(udajeBest,k,1)
B <- Obrazekmocpekny(udajeWorst,k,0)
#Vykresli mi nejhorsi a nejlepsi shodu na jeden obrazek
figure <- ggarrange(A,B)
annotate_figure(figure )
source('D:/Intel/Documents/Real data VU/ObrazekPearson.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/pokr_analyza.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/Nacteni_dat.R', echo=TRUE)
source('D:/Intel/Documents/Real data VU/ObrazekPearson.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/resulthyp.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/pokr_analyza.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/ObrazekPearson.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/pokr_analyza.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/pokr_analyza.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/ObrazekPearson.R', encoding = 'UTF-8', echo=TRUE)
#Vykresli histogram + gamma fit + odhadnute teoreticke s nejlepsim a nejhorsim Pearsonem na teto krizovatce a specifickym k
A <- Obrazekmocpekny(udajeBest,k,1)
B <- Obrazekmocpekny(udajeWorst,k,0)
#Vykresli mi nejhorsi a nejlepsi shodu na jeden obrazek
figure <- ggarrange(A,B)
annotate_figure(figure )
source('D:/Intel/Documents/Real data VU/ObrazekPearson.R', encoding = 'UTF-8', echo=TRUE)
#Vykresli histogram + gamma fit + odhadnute teoreticke s nejlepsim a nejhorsim Pearsonem na teto krizovatce a specifickym k
A <- Obrazekmocpekny(udajeBest,k,1)
B <- Obrazekmocpekny(udajeWorst,k,0)
#Vykresli mi nejhorsi a nejlepsi shodu na jeden obrazek
figure <- ggarrange(A,B)
annotate_figure(figure )
source('D:/Intel/Documents/Real data VU/ObrazekPearson.R', encoding = 'UTF-8', echo=TRUE)
#Vykresli histogram + gamma fit + odhadnute teoreticke s nejlepsim a nejhorsim Pearsonem na teto krizovatce a specifickym k
A <- Obrazekmocpekny(udajeBest,k,1)
B <- Obrazekmocpekny(udajeWorst,k,0)
#Vykresli mi nejhorsi a nejlepsi shodu na jeden obrazek
figure <- ggarrange(A,B)
annotate_figure(figure )
source('D:/Intel/Documents/Real data VU/ObrazekPearson.R', encoding = 'UTF-8', echo=TRUE)
#Vykresli histogram + gamma fit + odhadnute teoreticke s nejlepsim a nejhorsim Pearsonem na teto krizovatce a specifickym k
A <- Obrazekmocpekny(udajeBest,k,1)
B <- Obrazekmocpekny(udajeWorst,k,0)
#Vykresli mi nejhorsi a nejlepsi shodu na jeden obrazek
figure <- ggarrange(A,B)
annotate_figure(figure )
source('D:/Intel/Documents/Simulace VU/kreslimboxplot.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/ObrazekPearson.R', encoding = 'UTF-8', echo=TRUE)
#Vykresli histogram + gamma fit + odhadnute teoreticke s nejlepsim a nejhorsim Pearsonem na teto krizovatce a specifickym k
A <- Obrazekmocpekny(udajeBest,k,1)
B <- Obrazekmocpekny(udajeWorst,k,0)
#Vykresli mi nejhorsi a nejlepsi shodu na jeden obrazek
figure <- ggarrange(A,B)
annotate_figure(figure )
#Vykresli histogram + gamma fit + odhadnute teoreticke s nejlepsim a nejhorsim Pearsonem na teto krizovatce a specifickym k
A <- Obrazekmocpekny(udajeBest,k,1)
B <- Obrazekmocpekny(udajeWorst,k,0)
#Vykresli mi nejhorsi a nejlepsi shodu na jeden obrazek
figure <- ggarrange(A,B)
annotate_figure(figure )
source('D:/Intel/Documents/Real data VU/ObrazekPearson.R', encoding = 'UTF-8', echo=TRUE)
#Vykresli histogram + gamma fit + odhadnute teoreticke s nejlepsim a nejhorsim Pearsonem na teto krizovatce a specifickym k
A <- Obrazekmocpekny(udajeBest,k,1)
B <- Obrazekmocpekny(udajeWorst,k,0)
#Vykresli mi nejhorsi a nejlepsi shodu na jeden obrazek
figure <- ggarrange(A,B)
annotate_figure(figure )
source('D:/Intel/Documents/Real data VU/ObrazekPearson.R', encoding = 'UTF-8', echo=TRUE)
#Vykresli histogram + gamma fit + odhadnute teoreticke s nejlepsim a nejhorsim Pearsonem na teto krizovatce a specifickym k
A <- Obrazekmocpekny(udajeBest,k,1)
B <- Obrazekmocpekny(udajeWorst,k,0)
#Vykresli mi nejhorsi a nejlepsi shodu na jeden obrazek
figure <- ggarrange(A,B)
annotate_figure(figure )
source('D:/Intel/Documents/Real data VU/pokr_analyza.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/pokr_analyza.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/pokr_analyza.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/pokr_analyza.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/pokr_analyza.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/pokr_analyza.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/pokr_analyza.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/pokr_analyza.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/pokr_analyza.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/pokr_analyza.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/Nacteni_dat.R', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
#Finalni obrazek histogram+gamma+teoreticka
obrazecek1 <- histogramek + geom_line( aes(x=sourx,y=hustota),lwd=1.4,color="orangered")
obrazecek1
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
figure <- ggarrange(obrazecek0,obrazecek1,obrazecek2,obrazecek3)
figure
annotate_figure(figure)
obrazecek1
obrazecek2
obrazecek1
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
obrazecek0
source('D:/Intel/Documents/Real data VU/Nacteni_dat.R', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/resulthyp.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/ObrazekPearson.R', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
warnings()
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
obrazecek0
obrazecek1
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
mrdka
picus
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
Createfig(0)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
Createfig(0)
Createfig(1)
figure <- ggarrange(Createfig(0),Createfig(1),Createfig(2),Createfig(3))
annotate_figure(figure)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
beta
mu
source('~/.active-rstudio-document', echo=TRUE)
alpha
beta
mu
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('D:/Intel/Documents/Real data VU/resulthyp.R', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
warnings()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('D:/Intel/Documents/Real data VU/Pearsonuvfitobrazek.R', encoding = 'UTF-8', echo=TRUE)
source('D:/Intel/Documents/Real data VU/Pearsonuvfitobrazek.R', encoding = 'UTF-8', echo=TRUE)
Createfig(0,2)
source('~/.active-rstudio-document', echo=TRUE)
k<- 0
#Uprava do homogenniho vzorku dat, viz pokr_analyza
###############################################################################
#Indexy pro stredne rychla auta v uploadovanych datech
dolniR <- as.numeric(quantile(Upload$Rychlost,0.10))
horniR <- as.numeric(quantile(Upload$Rychlost,0.90))
Stredni_auta <- which(Upload$Rychlost >= dolniR & Upload$Rychlost <=horniR)
akcept <- which(Upload$k==k)
#Indexy pro prumernou hustotu vozidel
dolniH <- as.numeric(quantile(Upload$Hustota,0.10))
horniH <- as.numeric(quantile(Upload$Hustota,0.90))
prumer <- which(Upload$Hustota >dolniH & Upload$Hustota <horniH )
#Indexy stredne rychlych aut se stredni hustotou ktere akceptovaly k vozidel
stredni <- intersect(intersect(Stredni_auta,akcept),prumer)
#Stredne rychla vozidla akceptovana k vozidly
Data <- Upload$Gap[stredni]
Data <- Data/mean(Data)
#####
#Provedeni Pearsonova testu
ListPearson <- resulthyp(Data,k)
TeorHyp <- ListPearson$RozhodnutiTeor
reportX2 <- ListPearson$Pearson
GammaHyp <- ListPearson$RozhodnutiGamma
#Pro kazdy chunk si ulozim hodnoty parametru
alpha <- ListPearson$Parametry["alpha"]
beta <- ListPearson$Parametry["beta"]
lambda <- ListPearson$Parametry["lambda"]
mu <- ListPearson$Parametry["mu"]
alpha
beta
mu
Createfig(0,2)
Createfig(0,2)
source('~/.active-rstudio-document', echo=TRUE)
source('D:/Intel/Documents/Real data VU/resulthyp.R', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
paa=1
paa <- 1
mkp <- 1
pnl <- 1
calc = (44+4*paa+3*mkp+2pnl)/51
calc = (44+4*paa+3*mkp+2*pnl)/51
(calc = (44+4*paa+3*mkp+2*pnl)/51)
paa <- 2
mkp <- 1
pnl <- 1
(calc = (44+4*paa+3*mkp+2*pnl)/51)
paa <- 2
mkp <- 2
pnl <- 2
(calc = (44+4*paa+3*mkp+2*pnl)/51)
mkp <- 1
pnl <- 2
(calc = (44+4*paa+3*mkp+2*pnl)/51)
(calc = (44+4*paa+3*mkp+2*pnl+20)/61)
(calc = (44+4*paa+3*mkp+2*pnl)/51)
paa <- 2
mkp <- 1
pnl <- 2
(calc = (44+4*paa+3*mkp+2*pnl)/51)
mkp <- 2
pnl <- 2
(calc = (44+4*paa+3*mkp+2*pnl)/51)
paa <- 2
mkp <- 1
pnl <- 3
(calc = (44+4*paa+3*mkp+2*pnl)/51)
paa <- 1
mkp <- 1
pnl <- 3
(calc = (44+4*paa+3*mkp+2*pnl)/51)
paa <- 1
mkp <- 3
pnl <- 3
(calc = (44+4*paa+3*mkp+2*pnl)/51)
paa <- 1
mkp <- 3
pnl <- 3
fko <- 2
(calc = (41+3*fko+4*paa+3*mkp+2*pnl)/51)
paa <- 2
mkp <- 1
pnl <- 1
fko <- 2
(calc = (41+3*fko+4*paa+3*mkp+2*pnl)/51)
fko <- 2.5
(calc = (41+3*fko+4*paa+3*mkp+2*pnl)/51)
fko <- 2
(calc = (41+3*fko+4*paa+3*mkp+2*pnl)/51)
paa <- 2
mkp <- 2
pnl <- 2
fko <- 2
(calc = (41+3*fko+4*paa+3*mkp+2*pnl)/51)
